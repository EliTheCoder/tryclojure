{"version":3,"sources":["app/error.cljs"],"mappings":";AAQA,AAAA,oBAAA,4BAAAA,hDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uDAAAF;;;AAAA,AAAA,CAAA,yDAAA,zDAAME,oEAAWI;AAAjB,AACE,OAAQC,cAAW,kDAAA,lDAACC,sDAAaF;;;AADnC,CAAA,4CAAA,5CAAMJ;;AAAN;AAAA,CAAA,sCAAA,WAAAC,jDAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAGA,kBAAA,lBAAMM,4CAAOC;AAAb,AACE,OAACC,yGAAQ,4DAAA,eAAA,3EAACC,8CAAMC,uBAAaH,UAAU,uFAAA,vFAACI,+CAAO,CAAA,CAAA,OAAA,OAAQ,AAACC,gBAAML;;AAEhE,6BAAA,7BAAMM,kEAAkBC,WAAWC;AAAnC,AACE,oBAAIA;AAAJ,0FAAcD;;AACV,IAAME,cAAY,AAACJ,gBAAME;AAAzB,AACE,GAAI,gBAAA,fAAIE;AAAR,0FACGF;;AADH,0FAEG,6CAAA,7CAACG,iDAAOH,YACR,AAACI,6CAAK,eAAA,dAAGF,mBAAeF;;;;AAEnC,6BAAA,gDAAAK,7EAAMI,kEACHT;AADH,AAAA,IAAAM,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;IAAAL,iBAAA,AAAAO,4CAAAF,eAAA;AAAA,AAEE,IAAMN,iBAAW,AAACY,2BAAsBZ;IAClCa,WAAS,AAACd,2BAAiBC,eAAWC;IAD5CS,aAEgBG;UAFhB,AAAAF,4CAAAD,WAAA,IAAA,jEAEOI;UAFP,AAAAH,4CAAAD,WAAA,IAAA,jEAEWK;AAFX,AAGE,oBAAA,WAAAC,/BAACC;AAAD,AAAO,8GAAAD,iBAAA,xHAACE;GAAcJ;;AACtB,oBAAMC;AAAN,AACE,uGAAA,vGAACG;;AACD,2BAAA,WAAAC,/BAACF;AAAD,AAAO,8GAAAE,iBAAA,xHAACD;GAAcH;;AAFxB;;;AAIJ,0BAAA,1BAAMK,4DAAeC,GAAGC;AAAxB,AACE,IAAAC,aAAoC,AAACI,kBAAQN;IAA7CE,iBAAA,AAAAhB,4BAAAgB;IAAAC,OAAA,AAAAhB,4CAAAe,eAAA;IAAAE,OAAA,AAAAjB,4CAAAe,eAAA;IAAAG,SAAA,AAAAlB,4CAAAe,eAAA;AAAA,AACE,oBAAM,iBAAAK,oBAAKJ;AAAL,AAAA,oBAAAI;AAAUH;;AAAVG;;;AAAN,AACE,IAAAC,qBAAmB,AAACrB,4CAAIc,QAAQE;AAAhC,AAAA,oBAAAK;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,IAAME,gBAAc,QAAA,PAAKP;IACnBQ,aAAW,iBAAAC,kBAAK,iBAAA,hBAAGF;IAARG,kBAAA;AAAA,AAAA,SAAAD,kBAAAC,mBAAAD,kBAAAC;;IACXC,WAAS,iBAAA,hBAAGJ;IAFlBD,qQAIsB,AAACQ,2BAAgBT,9FACjB,AAACU,oDAAYC,5GACb,AAACrC,6CAAK6B,lHACN,AAAC9B,6CAAK,CAAGiC,WAASH,jHAClB,AAACS,mBAAS,gCAAA,/BAAK,CAAGV,gBAAcC;aARtD,AAAAtB,4CAAAoB,WAAA,IAAA,pEAGOM;YAHP,AAAA1B,4CAAAoB,WAAA,IAAA,nEAGcO;IAMRK,gBAAc,6DAAA,mFAAA,mFAAA,nOAACC,sDAAOP,kLACM,CAAK,kDAAA,lDAAC9C,qDAAY,8DAAA,9DAACM,+CAAO,UAAA,TAAK6B,oBAC1B,CAAA,oDAAa,AAACmB,qBAAWxB,2FACpCiB;IACtBQ,UAAQ,AAACC,4CAAIC,gBAAML;IACnBM,WAAS,6DAAA,7DAACC,+CAAOC,kBAAM,AAACJ,4CAAI,AAACK,6CAAKtD,gBAAMF,eAAKkD;IAC7CH,oBAAc,AAACI,4CAAI,WAAAM;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAA1C,4CAAA2C,WAAA,IAAA,jEAAMC;eAAN,AAAA5C,4CAAA2C,WAAA,IAAA,tEAAU7B;AAAV,AACE,oBAAI8B;AACF,IAAMC,cAAY,OAAA,NAAKD;AAAvB,AACE,qIAAA,jFAAK,2EAAA,3EAAW,4CAAKC,sBAAaP,gEAAmBxB;;AACvD,QAAK,AAAClC,kDAAS,gEAAA,hEAACM,+CAAO,CAAA,MAAKoD,4DAAgBxB;;GAChDkB;AApBzB,AAqBE,QAAA,KAAU,kDAAA,lDAACpD,uDAAcoD;;AAtB7B;;;AADF;;;AAyBJ,sBAAA,tBAAMc,oDAAWC,EAAEC;AAAnB,AACE,IAAMA,QAAE,CAAGA,IAAE,AAAC7D,gBAAM4D;AAApB,AACE,oDAAKA,GAAE,AAACnE,kDAAS,qDAAA,rDAACM,+CAAO8D;;AAE7B,0BAAA,1BAAMC,4DAAeC,EAAEvC;AAAvB,AACE,IAAMwC,IAAE,AAACnC,kBAAQkC;IACXE,mBAAW,yIAAA,zIAACC,mDAAK,AAAA,mFAAOF;IACxB9D,aAAW,AAACiE,oBAAeJ;AAFjC,AAGE,gBAAA,hBAACrE;;AACD,IAAAqC,2BAAgB,AAAQgC;AAAxB,AAAA,oBAAAhC;AAAA,AAAA,iBAAAA,bAAWqC;AAAX,AACE,GAAU,6CAAA,7CAACC,qDAAUD;AAArB;AAAA,AACE,yGAAA,zGAACxE,qHAAoBwE;;;AAFzB;;AAGA,IAAArC,2BAAa,AAAWgC;AAAxB,AAAA,oBAAAhC;AAAA,AAAA,cAAAA,VAAWuC;AAAX,AACE,AAAC1E,yGAAQ,CAAA,yDAAkB0E;;AAD7B;;AAEA,IAAAvC,2BAAa,AAACF,kBAAQ,AAAC0C,mBAASR;AAAhC,AAAA,oBAAAhC;AAAA,AAAA,kBAAAA,dAAWiC;AAAX,AACE,AAAC5C,uGAAM;;AACP,AAACoD,qGAAIR;;AAFP;;AAGA,IAAAS,mBAAoCT;IAApCS,uBAAA,AAAAhE,4BAAAgE;IAAA/C,aAAA,AAAAhB,4CAAA+D,qBAAA;IAAA9C,aAAA,AAAAjB,4CAAA+D,qBAAA;IAAA7C,eAAA,AAAAlB,4CAAA+D,qBAAA;AAAA,AACE,oBAAM9C;AAAN,AACE,AAAC/B,yGAAQ,CAAA,gLAAA,8DAAA,jOACK,8BAAA,uEAAA,nFAAM8B,YAAK,yDAAA,ZAAKA,4EAChBC,4DAASC;;AAHzB;;AAIF,IAAAG,2BAAiB,AAAA,oFAAQiC;AAAzB,AAAA,oBAAAjC;AAAA,AAAA,kBAAAA,dAAW2C;AAAX,AACE,yGAAA,zGAAC9E,qHAAoB8E;;AADvB;;AAEA,IAAA3C,2BAAc,oBAAA,mCAAA,rDAAMkC,kBACJ,AAAC3C,wBAAcyC,EAAEvC;AADjC,AAAA,oBAAAO;AAAA,AAAA,eAAAA,XAAW4C;AAAX,AAEE,gBAAA,hBAACjF;;AACD,AAACE,yGAAQ+E;;AAHX;;AAIA,GAAMV;AAAN,AACE,IAAAlC,qBACK,iBAAM6C,KAAG,iBAAAC,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AACE,oBAAMlF;AAAN,AACE,AAACS,2BAAiBT,WAAWsB;;AAD/B;UADF,AAAA,CAAA0D,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;AAAT,AAGE,GAAU,AAACS,4BAAWV;AAAtB;;AAAA,AAA0BA;;;AAJjC,AAAA,oBAAA7C;AAAA,AAAA,SAAAA,LACE6C;AADF,AAKE,gBAAA,hBAAClF;;AACD,OAACE,yGAAQgF;;AANX;;;AADF","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.error/println","seq60495","self__4852__auto__","cljs.core/seq","strs","js/console","clojure.string.join","app.error/ruler","title","app.error.println","cljs.core.apply","cljs.core/str","cljs.core.repeat","cljs.core/count","app.error/split-stacktrace","stacktrace","verbose?","stack-count","cljs.core.take","cljs.core.drop","p__60498","map__60499","cljs.core/--destructure-map","cljs.core.get","app.error/print-stacktrace","vec__60500","cljs.core.nth","sci.core/format-stacktrace","segments","fst","snd","p1__60496#","cljs.core/run!","cljs.core.print","p1__60497#","app.error/error-context","ex","src-map","map__60503","file","line","column","cljs.core/ex-data","and__4251__auto__","temp__5753__auto__","content","vec__60504","matching-line","start-line","x__4336__auto__","y__4337__auto__","end-line","before","after","clojure.string/split-lines","cljs.core.map_indexed","cljs.core/list","cljs.core/split-at","snippet-lines","cljs.core.concat","cljs.core/ex-message","indices","cljs.core.map","cljs.core/first","max-size","cljs.core.reduce","cljs.core/max","cljs.core.comp","p__60507","vec__60508","idx","line-number","app.error/right-pad","s","n","app.error/error-handler","e","d","sci-error?","cljs.core.isa_QMARK_","sci.core/stacktrace","name","cljs.core._EQ_","m","cljs.core/ex-cause","cljs.core.prn","map__60511","phase","ec","st","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__60512","cljs.core/*print-newline*","*print-fn*-orig-val__60513","cljs.core/*print-fn*","*print-newline*-temp-val__60514","*print-fn*-temp-val__60515","x__4796__auto__","clojure.string/blank?"],"sourcesContent":["(ns app.error\n  (:refer-clojure :exclude [println])\n  (:require [clojure.string :as str]\n            [sci.core :as sci]))\n\n;; Author: Michiel Borkent [@borkdude]\n;; Source: https://github.com/babashka/scittle/blob/main/src/scittle/impl/error.cljs\n\n(defn println [& strs]\n  (.error js/console (str/join \" \" strs)))\n\n(defn ruler [title]\n  (println (apply str \"----- \" title \" \" (repeat (- 50 7 (count title)) \\-))))\n\n(defn split-stacktrace [stacktrace verbose?]\n  (if verbose? [stacktrace]\n      (let [stack-count (count stacktrace)]\n        (if (<= stack-count 10)\n          [stacktrace]\n          [(take 5 stacktrace)\n           (drop (- stack-count 5) stacktrace)]))))\n\n(defn print-stacktrace\n  [stacktrace {:keys [:verbose?]}]\n  (let [stacktrace (sci/format-stacktrace stacktrace)\n        segments (split-stacktrace stacktrace verbose?)\n        [fst snd] segments]\n    (run! #(print % \"\\n\") fst)\n    (when snd\n      (print \"...\\n\")\n      (run! #(print % \"\\n\") snd))))\n\n(defn error-context [ex src-map]\n  (let [{:keys [:file :line :column]} (ex-data ex)]\n    (when (and file line)\n      (when-let [content (get src-map file)]\n        (let [matching-line (dec line)\n              start-line (max (- matching-line 4) 0)\n              end-line (+ matching-line 6)\n              [before after] (->>\n                              (str/split-lines content)\n                              (map-indexed list)\n                              (drop start-line)\n                              (take (- end-line start-line))\n                              (split-at (inc (- matching-line start-line))))\n              snippet-lines (concat before\n                                    [[nil (str (str/join \"\" (repeat (dec column) \" \"))\n                                               (str \"^--- \" (ex-message ex)))]]\n                                    after)\n              indices (map first snippet-lines)\n              max-size (reduce max 0 (map (comp count str) indices))\n              snippet-lines (map (fn [[idx line]]\n                                   (if idx\n                                     (let [line-number (inc idx)]\n                                       (str (.padStart (str line-number) max-size \"0\") \"  \" line))\n                                     (str (str/join (repeat (+ 2 max-size) \" \")) line)))\n                                 snippet-lines)]\n          (str \"\\n\" (str/join \"\\n\" snippet-lines)))))))\n\n(defn right-pad [s n]\n  (let [n (- n (count s))]\n    (str s (str/join (repeat n \" \")))))\n\n(defn error-handler [e src-map]\n  (let [d (ex-data e)\n        sci-error? (isa? (:type d) :sci/error)\n        stacktrace (sci/stacktrace e)]\n    (ruler \"Scittle error\")\n    (when-let [name (.-name e)]\n      (when-not (= \"Error\" name)\n        (println \"Type:    \" name)))\n    (when-let [m (.-message e)]\n      (println (str \"Message:  \" m)))\n    (when-let [d (ex-data (ex-cause e) #_(.getCause e))]\n      (print (str \"Data:     \"))\n      (prn d))\n    (let [{:keys [:file :line :column]} d]\n      (when line\n        (println (str \"Location: \"\n                      (when file (str file \":\"))\n                      line \":\" column \"\"))))\n    (when-let [phase (:phase d)]\n      (println \"Phase:   \" phase))\n    (when-let [ec (when sci-error?\n                    (error-context e src-map))]\n      (ruler \"Context\")\n      (println ec))\n    (when sci-error?\n      (when-let\n       [st (let [st (with-out-str\n                      (when stacktrace\n                        (print-stacktrace stacktrace src-map)))]\n             (when-not (str/blank? st) st))]\n        (ruler \"Stack trace\")\n        (println st)))))\n"]}