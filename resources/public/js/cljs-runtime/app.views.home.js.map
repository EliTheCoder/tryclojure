{"version":3,"sources":["app/views/home.cljs"],"mappings":";AASA,6BAAA,7BAAKA;AAGL,+BAAA,/BAAKC;AAOL;;;;8BAAA,9BAAMC;AAAN,AAIE,GAAI,AAACC;AACH,IAAMC,WAAS,gBAAA,hBAACC;IACVC,OAAK,AAACC,4CAAIC,sBAASJ;AADzB,AAAA,0FAEG,AAAA,oFAAQE,MAAM,AAAA,uFAAUA;;AAH7B,0FAIGN,2BAAYC;;;AAEjB,6BAAA,7BAAOQ,kEAAaC,KAAKC;AAAzB,AAAA,0FACG,4BAAA,MAAA,lCAACC,uBAAeF,oCAChBC;;AAEH,mCAAA,nCAAKE;AAEL,8BAAA,9BAAOC,oEAAcJ,KAAKC;AAA1B,AAAA,0FACG,iBAAMI,MAAI,AAACC,kBAAQH,iCAAkBH;AAArC,AACE,oBAAIK;AACF,IAAME,IAAE,AAACC,gDAAQ,AAACC,eAAKJ;IACjBK,IAAE,AAACf,gBAAYY;AADrB,AAEE,OAACL,uBAAeF,KAAKG,iCAAkBO;;AACzCV;;KACJC;;AAEH,0BAAA,1BAAOU,4DAAUC;AAAjB,AACE,0HAAA,mFAAA,tMAACC,+DAASD,0NAAwBb,2BAAYK;;AAMhD,+BAAA,uCAAAU,tEAAME;AAAN,AAAA,IAAAD,aAAAD;YAAA,AAAAjB,4CAAAkB,WAAA,IAAA,nEAAsBE;cAAtB,AAAApB,4CAAAkB,WAAA,IAAA,rEAA4BG;AAA5B,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;eAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,jGAAaY,wGAAS,WAAKC;AAAL,AACE,IAAMC,SAAO,AAAUD;IACjBE,YAAU,AAAYD;AAD5B,AAEE,GAAM,uDAAA,vDAACE,6CAAED;AAAT,0CACO,AAAeD,1CACf,AAACG,sBAAOC;;AACb,OAACC;;AAHH;;IAH1B,CAAAnB,cAAA;IAAAW,WAAA,AAAA,mFAAA,mDAAA,2CAAA,wDAAA,oFAAA,cAAA,aAAA,kBAAA,mBAAA,YAAA,eAAA,SAAA,SAAA,MAAA,gBAAA,qBAAA,8EAAA,mFAAA,kDAAA,2CAAA,wDAAA,mFAAA,WAAA,OAAA,YAAA,+CAAA,mFAAA,mDAAA,2CAAA,wDAAA,mFAAA,kBAAA,oBAAA,2FAAA,t1BAkBmBC,2YAEfd,udAE2C,AAACN,wBAASO;AAtBzD,AAAAY;;AAwBF,sBAAA,tBAAMS;AAAN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,mFAAA,OAAA,cAAA,WAAA,eAAA,iBAAA,YAAA,WAAA,uBAAA,mFAAA,mDAAA,2CAAA,wDAAA,mFAAA,SAAA,sBAAA,8JAAA,mFAAA,mDAAA,2CAAA,wDAAA,mFAAA,SAAA,OAAA,YAAA,SAAA,UAAA,OAAA,UAAA,wBAAA,/dAUKvB,6BAAc,AAACxB,qhBASfgD","names":["app.views.home/intro-title","app.views.home/intro-content","app.views.home/compute-step","app.repl/tutorial-active?","step-idx","app.session/get","step","cljs.core.nth","app.tutorial/tutorial","app.views.home/link-target","text","state","clojure.string/replace","app.views.home/re-doublebrackets","app.views.home/session-vars","res","cljs.core/re-find","k","cljs.core.keyword","cljs.core/last","v","app.views.home/parse-md","s","markdown.core.md__GT_html","p__79736","vec__79737","app.views.home/tutorial-view","title","content","with-let79740","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__44351__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init79741","cljs.core/not","res79742","click-fn","e","target","node-name","cljs.core._EQ_","cljs.core/reset!","app.repl/repl-input","app.repl/focus-input","app.views.home/view","app.repl/repl-el"],"sourcesContent":["(ns app.views.home\n  (:require\n   [reagent.core :as r]\n   [clojure.string :as string]\n   [app.repl :as repl :refer [repl-el]]\n   [markdown.core :refer [md->html]]\n   [app.session :as session]\n   [app.tutorial :refer [tutorial]]))\n\n(def intro-title\n  \"Got 5 minutes?\")\n\n(def intro-content\n  \"> If you want everything to be familiar, you'll never learn anything new. - Rich Hickey\n\nLet's have some fun! Here on the right you have a **REPL**, a command line\nwith a _read-eval-print_ loop. Everything you write will be evaluated. \nTry to type some expressions as `(+ 1 2)` or click on code to auto insert.\\n\\nType `(start)` when you're ready!\")\n\n(defn compute-step\n  \"Returns a list of `title` and `content`\n  based on the current step stored into the session.\"\n  []\n  (if (repl/tutorial-active?)\n    (let [step-idx (session/get :step)\n          step (nth tutorial step-idx)]\n      [(:title step) (:content step)])\n    [intro-title intro-content]))\n\n(defn- link-target [text state]\n  [(string/replace text #\"<a \" \"<a target=\\\"_blank\\\" \")\n   state])\n\n(def re-doublebrackets #\"(\\[\\[(.+)\\]\\])\")\n\n(defn- session-vars [text state]\n  [(let [res (re-find re-doublebrackets text)]\n     (if res\n       (let [k (keyword (last res))\n             v (session/get k)]\n         (string/replace text re-doublebrackets v))\n       text))\n   state])\n\n(defn- parse-md [s]\n  (md->html s :custom-transformers [link-target session-vars]))\n\n;; -------------------------\n;; Views\n;; -------------------------\n\n(defn tutorial-view [[title content]]\n  (r/with-let [click-fn (fn [e]\n                          (let [target (.-target e)\n                                node-name (.-nodeName target)]\n                            (when (= node-name \"CODE\")\n                              (->> (.-textContent target)\n                                   (reset! repl/repl-input))\n                              (repl/focus-input))))]\n    [:div {:class [\"bg-gray-200\"\n                   \"text-black\"\n                   \"dark:text-white\"\n                   \"dark:bg-gray-800\"\n                   \"shadow-lg\"\n                   \"rounded-l-md\"\n                   \"w-full\"\n                   \"md:p-8\"\n                   \"p-6\"\n                   \"min-h-[200px]\"\n                   \"opacity-95\"]\n           :on-click click-fn}\n     [:h1 {:class [\"text-3xl\" \"mb-4\" \"font-bold\" \"tracking-tight\"]}\n      title]\n     [:div {:class [\"leading-relaxed\" \"last:pb-0\"]\n            :dangerouslySetInnerHTML #js{:__html (parse-md content)}}]]))\n\n(defn view []\n  [:div {:class [\"flex\"\n                 \"sm:flex-row\"\n                 \"flex-col\"\n                 \"items-center\"\n                 \"justify-center\"\n                 \"xl:-mt-32\"\n                 \"lg:-mt-8\"\n                 \"mt-0\"]}\n   [:div {:class [\"flex-1\" \"z-0\"]}\n    [tutorial-view (compute-step)]]\n   [:div {:class [\"flex-1\"\n                  \"z-10\"\n                  \"sm:w-auto\"\n                  \"w-full\"\n                  \"sm:mt-0\"\n                  \"mt-7\"\n                  \"sm:mb-0\"\n                  \"mb-14\"]}\n    [repl-el]]])\n"]}