{"version":3,"sources":["app/repl.cljs"],"mappings":"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","names":["js/app","js/app.repl","js/app.repl.repl-history","app.repl/repl-history","reagent.core.atom","js/app.repl.repl-input","app.repl/repl-input","js/app.repl.repl-multiline","app.repl/repl-multiline","var_args","G__79540","app.repl/write-repl!","js/Error","s","app.repl.write_repl_BANG_","k","cljs.core.swap_BANG_","cljs.core/concat","app.repl/inc-step!","app.session/inc!","app.repl/dec-step!","app.session/dec!","app.repl/tutorial-active?","app.session/get","app.repl/start-tutorial","app.session/set!","app.repl/clear-repl","cljs.core/reset!","app.repl/restart-tutorial","app.session/session","app.repl/set-name","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.repl/set-prompt","p__79542","map__79543","cljs.core/--destructure-map","cljs.core.get","seq79541","self__4852__auto__","cljs.core/seq","color","text","valid-colors","full-color","clojure.string/lower-case","colors","app.utils/in?","clojure.string.join","app.sci/set-print-fn","app.sci/extend-ctx","app.env/DEBUG","v","app.repl/check-tutorial-test","out","step-idx","step","cljs.core.nth","app.tutorial/tutorial","test-fn","e79544","cljs.core.println","_","app.repl/format-output","app.repl/input-command","cljs.core/deref","cljs.core/empty?","app.repl/update-multiline!","cljs.core/not-empty","app.repl/write-input!","in","app.repl/on-keydown","e","and__4251__auto__","cljs.core._EQ_","app.env.debug","cmd","e79546","app.sci/eval-string","out-str","clojure.string/includes?","inputs","p1__79545#","cljs.core.filter","last-in","cljs.core/last","app.repl/prompt","or__4253__auto__","app.repl/history-view","iter__4652__auto__","s__79548","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__79550","cljs.core/chunk-buffer","i__79549","vec__79551","cljs.core/-nth","map__79554","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79547","cljs.core/chunk-rest","vec__79558","cljs.core/first","map__79561","cljs.core/cons","cljs.core/rest","index","type","value","cljs.core.map_indexed","cljs.core/vector","pred__79555","expr__79556","pred__79562","expr__79563","cljs.core/=","app.repl/scroll-bottom","el","js/setTimeout","js/app.repl.input-el","app.repl/input-el","app.repl/focus-input","app.repl/repl-el","with-let79568","reagent.ratom/with-let-values","temp__5757__auto__","reagent.ratom/*ratom-context*","c__44351__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init79569","cljs.core/not","res79570","p1__79565#","p1__79566#","p1__79567#","destroy__44350__auto__","reagent.ratom/reactive?","container-el","has-focus","scroll-watch","reagent.core/track!","app.utils/get-val","reagent.core/dispose!","cljs.core/chunk-first"],"sourcesContent":["(ns app.repl\n  (:require\n   [clojure.string :as string]\n   [reagent.core :as r]\n   [app.sci :as sci]\n   [app.utils :as utils :refer [get-val in?]]\n   [app.env :refer [debug DEBUG]]\n   [app.session :as session]\n   [app.tutorial :refer [tutorial]]))\n\n;; Collection of map with the REPL command history.\n(defonce repl-history\n  (r/atom [{:type :special\n            :value \"Type your Clojure symbolic expressions here\"}]))\n\n;; Store the REPL input while typed in the input el\n(defonce repl-input (r/atom nil))\n\n;; Store a multiline command as a single string\n(defonce repl-multiline (r/atom nil))\n\n(defn write-repl!\n  \"Append `s` to the REPL history.\n  Optional keyword `k` to use as a type.\"\n  ([s]\n   (write-repl! s :output))\n  ([s k]\n   (swap! repl-history concat [{:type k :value s}])))\n\n(defn inc-step!\n  \"Increment the current tutorial steps.\"\n  []\n  (session/inc! :step))\n\n(defn dec-step!\n  \"Increment the current tutorial steps.\"\n  []\n  (session/dec! :step))\n\n(defn tutorial-active? []\n  (true? (session/get :tutorial)))\n\n;; -------------------------\n;; SCI utils\n;; -------------------------\n\n(defn start-tutorial\n  \"Start the tutorial setting the initial step into the session.\"\n  []\n  (session/set! :tutorial true) ; activate the tutorial\n  (session/set! :step 0)\n  \"Tutorial started!\")\n\n(defn clear-repl\n  \"Delete all the repl history.\"\n  []\n  (reset! repl-history [])\n  nil)\n\n(defn restart-tutorial\n  \"Reset the tutorial session.\"\n  []\n  (reset! session/session {}))\n\n(defn set-name\n  \"Save user name into the session.\"\n  [s]\n  (when (string? s)\n    (session/set! :user-name s)\n    {:user-name s}))\n\n(defn set-prompt\n  \"Change the prompt style.\"\n  [& {:keys [color text]}]\n  (when (string? text)\n    (session/set! :prompt-text text))\n  (when (string? color)\n    (let [;; Required by tailwind to import classes into styles\n          valid-colors [\"text-amber-400\"\n                        \"text-yellow-400\"\n                        \"text-red-400\"\n                        \"text-green-400\"\n                        \"text-orange-400\"\n                        \"text-slate-400\"\n                        \"text-gray-400\"\n                        \"text-teal-400\"\n                        \"text-lime-400\"\n                        \"text-blue-400\"\n                        \"text-violet-400\"\n                        \"text-purple-400\"\n                        \"text-pink-400\"\n                        \"text-rose-400\"\n                        \"text-emerald-400\"]\n          full-color (str \"text-\" (string/lower-case color) \"-400\")\n          colors [\"amber\" \"yellow\" \"red\" \"green\" \"orange\" \"slate\" \"gray\" \"teal\"\n                  \"lime\" \"blue\" \"violet\" \"purple\" \"pink\" \"rose\" \"emerald\"]]\n      (if (in? valid-colors full-color)\n        (session/set! :prompt-color full-color)\n        (str \"Invalid color: \"\n             color\n             \"! Valid colors are: \"\n             (string/join \" \" colors)\n             \".\")))))\n\n;; Initialize an internal print funcion\n(sci/set-print-fn (fn [s] (write-repl! s)))\n\n;; Append the start-tutorial function as 'start\n(sci/extend-ctx {:namespaces {'user {'start start-tutorial\n                                     'clear clear-repl\n                                     'restart restart-tutorial\n                                     'my-name set-name\n                                     'next-step inc-step!\n                                     'prev-step dec-step!\n                                     'set-step (when DEBUG (fn [v] (session/set! :step v)))\n                                     'set-prompt set-prompt\n                                     'more (fn [] true)}}})\n\n;; -------------------------\n;; REPL element\n;; -------------------------\n\n(defn check-tutorial-test\n  \"Check if the sci output pass the test function.\n  If it does, increase the tutorial step.\"\n  [out]\n  (when (tutorial-active?)\n    (let [step-idx (session/get :step)\n          step (nth tutorial step-idx)\n          test-fn (:test step)]\n      (try (when (test-fn out)\n             (println \"HUUUUUUU\")\n             (inc-step!))\n           (catch :default _)))))\n\n(defn format-output\n  \"Return formatted output for REPL print.\"\n  [out]\n  (cond\n    (nil? out) \"nil\"\n    (string? out) (str \"\\\"\" out \"\\\"\")\n    :else (str out)))\n\n(defn input-command\n  \"Return the entire command typed into the REPL.\n  Update the repl-multiline in case.\"\n  []\n  (if (empty? @repl-multiline) @repl-input @repl-multiline))\n\n(defn update-multiline! []\n  (when (not-empty @repl-multiline)\n    (->> (str @repl-multiline @repl-input)\n         (reset! repl-multiline))))\n\n(defn write-input! [in]\n  (if (empty? @repl-multiline)\n    (write-repl! in :input)\n    (write-repl! in :input-multi)))\n\n(defn on-keydown\n  \"Onkeydown event for the REPL input; Evaluate the string\n  using SCI and add the output/error to the REPL. Manage\n  the last command using arrow-up and a basic multiline\n  in case of EOF error.\"\n  [e]\n  (let [in @repl-input]\n    ;; Enter\n    (when (and (= (.-key e) \"Enter\") (not-empty in))\n      (debug \"input: \" in)\n      (update-multiline!)\n      (write-input! in)\n      (let [cmd (input-command)]\n        (try (let [out (sci/eval-string cmd)\n                   out-str (format-output out)]\n               (check-tutorial-test out)\n               (debug \"output: \" out)\n               (reset! repl-input nil)\n               (reset! repl-multiline nil)\n               ;; Append to history\n               (write-repl! out-str))\n             (catch :default e\n               (cond (string/includes? (.-message e) \"EOF while reading\")\n                     (do (reset! repl-input nil)\n                         (reset! repl-multiline cmd))\n                     :else\n                     (do (reset! repl-input nil)\n                         (reset! repl-multiline nil)\n                         ;; Append error to history\n                         (write-repl! (.-message e) :error)))))))\n    ;; Arrow Up\n    (when (= (.-key e) \"ArrowUp\")\n      (let [inputs (filter #(= (:type %) :input) @repl-history)\n            last-in (last inputs)]\n        (reset! repl-input (:value last-in))))))\n\n(defn prompt\n  \"Render the prompt element, extracting color and text\n  from the session.\"\n  []\n  (let [color (session/get :prompt-color)\n        text (session/get :prompt-text)]\n    [:span {:class [(or color \"text-amber-500 dark:text-amber-400\")]}\n     (or text \"=>\")]))\n\n(defn history-view\n  \"Render a list of div containing the command history\n  of the REPL.\"\n  []\n  [:<>\n   (for [[index {:keys [type value]}] (map-indexed vector @repl-history)]\n     ^{:key (str \"repl-part-\" index)}\n     [:div {:class [\"pl-2\" (when (= type :special) \"mt-1 mb-2\")]}\n      ;; Show prompt if item is input\n      (condp = type\n        :input [prompt]\n        :input-multi [:span \">\"]\n        nil)\n      [:span {:class [\"px-2\"\n                      (when (= type :error) \"text-red-400\")\n                      (when (= type :special) \"text-gray-500 italic\")]}\n       value]])])\n\n(defn scroll-bottom\n  \"Scroll DOM element `el` to the bottom.\"\n  [el _]\n  (when el\n    ;; Push the callback at the bottom of the call stack\n    (js/setTimeout\n     #(set! (.-scrollTop el) (.-scrollHeight el))\n     0)))\n\n;; External to the component because needs to be used by\n;; the focus function\n(defonce input-el (r/atom nil))\n\n(defn focus-input []\n  (.focus @input-el))\n\n(defn repl-el []\n  (r/with-let [container-el (r/atom nil)\n               has-focus (r/atom false)\n               ;; Include repl-history to track any change to the atom\n               ;; and scroll to the bottom when new items are added\n               scroll-watch (r/track! #(scroll-bottom\n                                        @container-el\n                                        @repl-history))]\n    [:div {:class [\"border\"\n                   \"border-gray-300\"\n                   \"dark:border-0\"\n                   \"rounded-md\"\n                   \"bg-white\"\n                   \"dark:bg-slate-800\"\n                   \"font-mono\"\n                   \"text-sm\"\n                   \"text-black\"\n                   \"dark:text-white\"\n                   \"sm:h-[500px]\"\n                   \"h-[200px]\"\n                   \"xl:max-w-[618px]\"\n                   \"lg:max-w-[518px]\"\n                   \"md:max-w-[350px]\"\n                   \"overflow-auto\"\n                   \"p-3\"\n                   \"-my-8\"\n                   \"shadow-2xl\"]\n           :ref #(reset! container-el %)\n           :on-click focus-input}\n     [history-view]\n     [:div {:class [\"flex\" \"flex-row\" \"pl-2\"]}\n      (if (empty? @repl-multiline)\n        [prompt]\n        [:span \">\"])\n      [:input {:class [\"flex-1\"\n                       \"px-2\"\n                       \"outline-none\"\n                       \"bg-transparent\"]\n               :ref #(reset! input-el %)\n               :value @repl-input\n               :on-focus #(reset! has-focus true)\n               :on-blur #(reset! has-focus false)\n               :on-key-down on-keydown\n               :on-change #(reset! repl-input (get-val %))}]]]\n    (finally (r/dispose! scroll-watch))))\n"]}