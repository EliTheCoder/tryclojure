{"version":3,"sources":["app/session.cljs"],"mappings":";AAIA,GAAA,QAAAA,gCAAAC,wCAAAC;AAAA;AAAA,AAAA,AAASC,sBACP,gDAAA,hDAACC;;AAEH,kBAAA,lBAAMC,4CAAKC;AAAX,AACE,IAAAC,WAAA,AAAAC,gBAAIL;AAAJ,AAAA,0EAAAI,wBAAAA,1FAACD,kCAAAA,4CAAAA;;AAEH,wBAAA,xBAAMG,wDAAMH,EAAEI;AAAd,AACE,OAACC,mDAAMR,oBAAQS,gBAAMN,EAAEI;;AAEzB,wBAAA,xBAAMG,wDAAMP;AAAZ,AACE,OAACK,mDAAMR,oBAAQW,iBAAOR;;AAExB,wBAAA,xBAAMS,wDAAMT;AAAZ,AACE,OAACK,mDAAMR,oBAAQa,iBAAOV,EAAEW;;AAE1B,wBAAA,xBAAMC,wDAAMZ;AAAZ,AACE,OAACK,mDAAMR,oBAAQa,iBAAOV,EAAEa","names":["js/app","js/app.session","js/app.session.session","app.session/session","reagent.core.atom","app.session/get","k","G__64684","cljs.core/deref","app.session/set!","v","cljs.core.swap_BANG_","cljs.core/assoc","app.session/del!","cljs.core/dissoc","app.session/inc!","cljs.core/update","cljs.core/inc","app.session/dec!","cljs.core/dec"],"sourcesContent":["(ns app.session\n  (:refer-clojure :exclude [get set])\n  (:require [reagent.core :as r]))\n\n(defonce session\n  (r/atom {}))\n\n(defn get [k]\n  (k @session))\n\n(defn set! [k v]\n  (swap! session assoc k v))\n\n(defn del! [k]\n  (swap! session dissoc k))\n\n(defn inc! [k]\n  (swap! session update k inc))\n\n(defn dec! [k]\n  (swap! session update k dec))\n"]}